


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000 40004100 
                       DC      EQU              0x40004100
   23 00000000 00000000 
                       DC_COMMAND
                               EQU              0
   24 00000000 00000040 
                       DC_DATA EQU              0x40
   25 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   26 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   27 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   28 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   29 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   30 00000000         
   31 00000000                 EXPORT           writecommand
   32 00000000                 EXPORT           writedata
   33 00000000         
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   35 00000000                 THUMB
   36 00000000                 ALIGN
   37 00000000         
   38 00000000         ; The Data/Command pin must be valid when the eighth bit



ARM Macro Assembler    Page 2 


                        is
   39 00000000         ; sent.  The SSI module has hardware input and output FI
                       FOs
   40 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat
   41 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   42 00000000         ; lot of data, the FIFOs are not used when writing
   43 00000000         ; commands, and they are used when writing data.  This
   44 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   45 00000000         ; that is actually being transmitted.
   46 00000000         ; The write command operation waits until all data has b
                       een
   47 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   48 00000000         ; the command, and then waits for the transmission to
   49 00000000         ; finish.
   50 00000000         ; The write data operation waits until there is room in 
                       the
   51 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   52 00000000         ; and then adds the data to the transmit FIFO.
   53 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   54 00000000         ; the SSI0 module is not initialized and enabled.
   55 00000000         
   56 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   57 00000000         ; Input: R0  8-bit command to transmit
   58 00000000         ; Output: none
   59 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   60 00000000         writecommand
   61 00000000         ;1) Read SSI0_SR_R and check bit 4, 
   62 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   63 00000000         ;3) Clear D/C=PA6 to zero
   64 00000000         ;4) Write the command to SSI0_DR_R
   65 00000000         ;5) Read SSI0_SR_R and check bit 4, 
   66 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   67 00000000 4910            LDR              R1, =SSI0_SR_R ;    R1 = &SSI0_
                                                            SR_R
   68 00000002 F04F 0310       LDR              R3, =SSI_SR_BSY ;    R3 = SSI_S
                                                            R_BSY
   69 00000006         LCDwcloop1                           ; 1) return here wh
                                                            ile SSI0 busy/trans
                                                            mit FIFO not empty
   70 00000006 680A            LDR              R2, [R1]    ; 1) read SSI0_SR_R
                                                            
   71 00000008 EA02 0203       AND              R2, R2, R3  ; 2) check SSI_SR_B
                                                            SY
   72 0000000C 429A            CMP              R2, R3      ; 2) is SSI0_SR_R&S
                                                            SI_SR_BSY == SSI_SR
                                                            _BSY?
   73 0000000E D0FA            BEQ              LCDwcloop1  ; 2) if so, keep po
                                                            lling
   74 00000010 490D            LDR              R1, =DC     ; 3) R1 = &DC



ARM Macro Assembler    Page 3 


   75 00000012 F04F 0200       MOV              R2, #DC_COMMAND ; 3) R2 = DC_CO
                                                            MMAND
   76 00000016 600A            STR              R2, [R1]    ; 3) [R1] = R2 (DC 
                                                            pin configured for 
                                                            command)
   77 00000018 490C            LDR              R1, =SSI0_DR_R ; 4) R1 = &SSI0_
                                                            DR_R
   78 0000001A 6008            STR              R0, [R1]    ; 4) [R1] = R0 (sto
                                                            re message in SSI0 
                                                            Data Register)
   79 0000001C 4909            LDR              R1, =SSI0_SR_R ;     R1 = &SSI0
                                                            _SR_R
   80 0000001E         LCDwcloop2                           ; 5) return here wh
                                                            ile SSI0 busy/trans
                                                            mit FIFO not empty
   81 0000001E 680A            LDR              R2, [R1]    ; 5) R2 = [R1]
   82 00000020 EA02 0203       AND              R2, R2, R3  ; 6) R2 = R2&R3 = S
                                                            SI0_SR_R&SSI_SR_BSY
                                                            
   83 00000024 429A            CMP              R2, R3      ; 6) is SSI0_SR_R&S
                                                            SI_SR_BSY == SSI_SR
                                                            _BSY?
   84 00000026 D0FA            BEQ              LCDwcloop2  ; 6 if so, keep pol
                                                            ling
   85 00000028         
   86 00000028         
   87 00000028 4770            BX               LR          ;   return
   88 0000002A         
   89 0000002A         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   90 0000002A         ; Input: R0  8-bit data to transmit
   91 0000002A         ; Output: none
   92 0000002A         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   93 0000002A         writedata
   94 0000002A         ;1) Read SSI0_SR_R and check bit 1, 
   95 0000002A         ;2) If bit 1 is low loop back to step 1 (wait for TNF bi
                       t to be high)
   96 0000002A         ;3) Set D/C=PA6 to one
   97 0000002A         ;4) Write the 8-bit data to SSI0_DR_R
   98 0000002A         
   99 0000002A 4906            LDR              R1, =SSI0_SR_R ;    R1 = &SSI0_
                                                            SR_R
  100 0000002C F04F 0302       LDR              R3, =SSI_SR_TNF ;    R3 = SSI_S
                                                            R_TNF
  101 00000030         LCDwdloop1                           ; 1) return here wh
                                                            ile SSI0 transmit F
                                                            IFO full
  102 00000030 680A            LDR              R2, [R1]    ; 1) read SSI0_SR_R
                                                            
  103 00000032 401A            ANDS             R2, R2, R3  ; 2) check SSI_SR_T
                                                            NF
  104 00000034         ; 2) TNF is 0 if the FIFO is full
  105 00000034 D0FC            BEQ              LCDwdloop1  ; 2) keep polling i
                                                            f transmit FIFO is 
                                                            not not_full
  106 00000036 4904            LDR              R1, =DC     ; 3) R1 = &DC
  107 00000038 F04F 0240       MOV              R2, #DC_DATA ; 3) R2 = DC_DATA
  108 0000003C 600A            STR              R2, [R1]    ; 3) Configure for 



ARM Macro Assembler    Page 4 


                                                            data
  109 0000003E 4903            LDR              R1, =SSI0_DR_R ; 4) &SSI0_DR_R
  110 00000040 6008            STR              R0, [R1]    ; 4) store message 
                                                            in SSI0 Data Regist
                                                            er)
  111 00000042         
  112 00000042 4770            BX               LR          ;   return
  113 00000044         
  114 00000044         
  115 00000044         ;***************************************************
  116 00000044         ; This is a library for the Adafruit 1.8" SPI display.
  117 00000044         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  118 00000044         ; ----> http://www.adafruit.com/products/358
  119 00000044         ; as well as Adafruit raw 1.8" TFT display
  120 00000044         ; ----> http://www.adafruit.com/products/618
  121 00000044         ;
  122 00000044         ; Check out the links above for our tutorials and wiring
                        diagrams
  123 00000044         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
  124 00000044         ; interface (RST is optional)
  125 00000044         ; Adafruit invests time and resources providing this ope
                       n source code,
  126 00000044         ; please support Adafruit and open-source hardware by pu
                       rchasing
  127 00000044         ; products from Adafruit!
  128 00000044         ;
  129 00000044         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  130 00000044         ; MIT license, all text above must be included in any re
                       distribution
  131 00000044         ;****************************************************
  132 00000044         
  133 00000044                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  134 00000044                 END                          ; end of file
              4000800C 
              40004100 
              40008008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\lcd.d -o.\lcd.o -I.\RTE\_SpaceInvaders -IC:\Users\lilyc\AppData\
Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\lilyc\AppData\Loc
al\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__UVISION_
VERSION SETA 529" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" 
--list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 34 in file LCD.s
   Uses
      None
Comment: .text unused
LCDwcloop1 00000006

Symbol: LCDwcloop1
   Definitions
      At line 69 in file LCD.s
   Uses
      At line 73 in file LCD.s
Comment: LCDwcloop1 used once
LCDwcloop2 0000001E

Symbol: LCDwcloop2
   Definitions
      At line 80 in file LCD.s
   Uses
      At line 84 in file LCD.s
Comment: LCDwcloop2 used once
LCDwdloop1 00000030

Symbol: LCDwdloop1
   Definitions
      At line 101 in file LCD.s
   Uses
      At line 105 in file LCD.s
Comment: LCDwdloop1 used once
writecommand 00000000

Symbol: writecommand
   Definitions
      At line 60 in file LCD.s
   Uses
      At line 31 in file LCD.s
Comment: writecommand used once
writedata 0000002A

Symbol: writedata
   Definitions
      At line 93 in file LCD.s
   Uses
      At line 32 in file LCD.s
Comment: writedata used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DC 40004100

Symbol: DC
   Definitions
      At line 22 in file LCD.s
   Uses
      At line 74 in file LCD.s
      At line 106 in file LCD.s

DC_COMMAND 00000000

Symbol: DC_COMMAND
   Definitions
      At line 23 in file LCD.s
   Uses
      At line 75 in file LCD.s
Comment: DC_COMMAND used once
DC_DATA 00000040

Symbol: DC_DATA
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 107 in file LCD.s
Comment: DC_DATA used once
SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 25 in file LCD.s
   Uses
      At line 77 in file LCD.s
      At line 109 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 26 in file LCD.s
   Uses
      At line 67 in file LCD.s
      At line 79 in file LCD.s
      At line 99 in file LCD.s

SSI_SR_BSY 00000010

Symbol: SSI_SR_BSY
   Definitions
      At line 28 in file LCD.s
   Uses
      At line 68 in file LCD.s
Comment: SSI_SR_BSY used once
SSI_SR_RNE 00000004

Symbol: SSI_SR_RNE
   Definitions
      At line 27 in file LCD.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: SSI_SR_RNE unused
SSI_SR_TNF 00000002

Symbol: SSI_SR_TNF
   Definitions
      At line 29 in file LCD.s
   Uses
      At line 100 in file LCD.s
Comment: SSI_SR_TNF used once
8 symbols
349 symbols in table
