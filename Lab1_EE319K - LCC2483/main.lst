


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program initially written by: Yerraballi and Valvano
    3 00000000         ; Author: Lillian Chieng
    4 00000000         ; Date Created: 1/15/2018 
    5 00000000         ; Last Modified: 2/3/2020
    6 00000000         ; Brief description of the program: Solution to Lab1
    7 00000000         ; The objective of this system is to implement odd-bit c
                       ounting system
    8 00000000         ; Hardware connections: 
    9 00000000         ;  Output is positive logic, 1 turns on the LED, 0 turns
                        off the LED
   10 00000000         ;  Inputs are negative logic, meaning switch not pressed
                        is 1, pressed is 0
   11 00000000         ;    PE0 is an input 
   12 00000000         ;    PE1 is an input 
   13 00000000         ;    PE2 is an input 
   14 00000000         ;    PE3 is the output
   15 00000000         ; Overall goal: 
   16 00000000         ;   Make the output 1 if there is an odd number of switc
                       hes pressed, 
   17 00000000         ;     otherwise make the output 0
   18 00000000         
   19 00000000         ; The specific operation of this system 
   20 00000000         ;   Initialize Port E to make PE0,PE1,PE2 inputs and PE3
                        an output
   21 00000000         ;   Over and over, read the inputs, calculate the result
                        and set the output
   22 00000000         ; PE2  PE1 PE0  | PE3
   23 00000000         ; 0    0    0   |  1    odd number of 0’s
   24 00000000         ; 0    0    1   |  0    even number of 0’s
   25 00000000         ; 0    1    0   |  0    even number of 0’s
   26 00000000         ; 0    1    1   |  1    odd number of 0’s
   27 00000000         ; 1    0    0   |  0    even number of 0’s
   28 00000000         ; 1    0    1   |  1    odd number of 0’s
   29 00000000         ; 1    1    0   |  1    odd number of 0’s
   30 00000000         ; 1    1    1   |  0    even number of 0’s
   31 00000000         ;There are 8 valid output values for Port E: 0x01,0x02,0
                       x04,0x07,0x08,0x0B,0x0D, and 0x0E. 
   32 00000000         
   33 00000000         ; NOTE: Do not use any conditional branches in your solu
                       tion. 
   34 00000000         ;       We want you to think of the solution in terms of
                        logical and shift operations
   35 00000000         
   36 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   37 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   38 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   39 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   40 00000000         
   41 00000000                 THUMB                        ;16 bits
   42 00000000                 AREA             DATA, ALIGN=2 ;ram 



ARM Macro Assembler    Page 2 


   43 00000000         ;global variables go here
   44 00000000                 ALIGN
   45 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2 
                                                            ;rom
   46 00000000                 EXPORT           Start
   47 00000000         Start
   48 00000000 4814            LDR              R0, =SYSCTL_RCGCGPIO_R 
                                                            ;turns on clock
   49 00000002 7801            LDRB             R1, [R0]
   50 00000004 F041 0110       ORR              R1, #0x10
   51 00000008 7001            STRB             R1, [R0]
   52 0000000A         
   53 0000000A BF00            NOP                          ;stabilize clock   
                                                            
   54 0000000C BF00            NOP
   55 0000000E         
   56 0000000E 4812            LDR              R0, =GPIO_PORTE_DIR_R ;indicati
                                                            ng output n input p
                                                            ins
   57 00000010 7801            LDRB             R1, [R0]
   58 00000012 F001 01F8       AND              R1, #0xF8
   59 00000016 F041 0108       ORR              R1, #0x08
   60 0000001A 7001            STRB             R1, [R0]
   61 0000001C         
   62 0000001C 480F            LDR              R0, =GPIO_PORTE_DEN_R
   63 0000001E 7801            LDRB             R1, [R0]
   64 00000020 F041 010F       ORR              R1, #0xF
   65 00000024 7001            STRB             R1, [R0]
   66 00000026         
   67 00000026         ;code to run once that initializes PE3,PE2,PE1,PE0
   68 00000026         loop
   69 00000026 480E            LDR              R0, =GPIO_PORTE_DATA_R
   70 00000028 F8D0 A000       LDR              R10, [R0]
   71 0000002C F00A 0101       AND              R1, R10, #0x01 ; R1 = PE0
   72 00000030 F00A 0202       AND              R2, R10, #0x02 ; R2 = PE1
   73 00000034 EA4F 0252       LSR              R2, #1
   74 00000038 F00A 0304       AND              R3, R10, #0x04 ; R3 = PE2
   75 0000003C EA4F 0393       LSR              R3, #2
   76 00000040 EA81 0402       EOR              R4, R1, R2
   77 00000044 EA84 0403       EOR              R4, R4, R3
   78 00000048 F084 0401       EOR              R4, R4, #1  ; R4 = LED ON/OFF (
                                                            toggled)
   79 0000004C         
   80 0000004C         ;LSL  R10, R10, #3  ; store R4 into PE3
   81 0000004C         ;BIC  R10, R10, #0x01
   82 0000004C         ;ADD  R10, R10, R4
   83 0000004C         ;LSR  R10, R10, #3
   84 0000004C         
   85 0000004C EA4F 04C4       LSL              R4, #3
   86 00000050 6004            STR              R4,[R0]
   87 00000052         ;code that runs over and over
   88 00000052 E7E8            B                loop
   89 00000054         
   90 00000054         
   91 00000054         
   92 00000054                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned



ARM Macro Assembler    Page 3 


   93 00000054                 END                          ; end of file
              400FE608 
              40024400 
              4002451C 
              400243FC 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab1 -IC:\Users\Lily\AppData\Local\Ar
m\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\Lily\AppData\Local\Arm\Pa
cks\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --pr
edefine="__UVISION_VERSION SETA 529" --predefine="_RTE_ SETA 1" --predefine="TM
4C123GH6PM SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 45 in file main.s
   Uses
      None
Comment: .text unused
Start 00000000

Symbol: Start
   Definitions
      At line 47 in file main.s
   Uses
      At line 46 in file main.s
Comment: Start used once
loop 00000026

Symbol: loop
   Definitions
      At line 68 in file main.s
   Uses
      At line 88 in file main.s
Comment: loop used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 69 in file main.s
Comment: GPIO_PORTE_DATA_R used once
GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 62 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 56 in file main.s
Comment: GPIO_PORTE_DIR_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 48 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
4 symbols
344 symbols in table
